<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Catch the Valorous Rabbit | @coding.stella</title>
  <style>
    @import url("https://fonts.googleapis.com/css?family=Voltaire");

    * { margin: 0; padding: 0; box-sizing: border-box; }

    body, html { width: 100%; height: 100%; overflow: hidden; font-family: "Voltaire", sans-serif; }

    #world {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: #dbe6e6;
      overflow: hidden;
    }

    #gameoverInstructions {
      position: absolute;
      font-weight: bold;
      text-transform: uppercase;
      font-size: 12vw;
      text-align: center;
      color: #ffc5a2;
      opacity: 0;
      left: 50%;
      top: 50%;
      width: 100%;
      transform: translate(-50%, -100%);
      user-select: none;
      transition: all 500ms ease-in-out;
      z-index: 10;
    }
    #gameoverInstructions.show {
      opacity: 1;
      transform: translate(-50%, -50%);
      transition: all 500ms ease-in-out;
    }

    #dist {
      position: absolute;
      left: 50%;
      top: 50px;
      transform: translate(-50%, 0%);
      user-select: none;
      z-index: 10;
    }
    .label { text-transform: uppercase; color: #ffa873; font-size: 12px; letter-spacing: 2px; text-align: center; margin-bottom: 5px; }
    #distValue { color: #dc5f45; font-size: 40px; text-align: center; }

    #instructions {
      position: absolute;
      width: 100%;
      bottom: 50px;
      text-align: center;
      font-size: 16px;
      color: #dc5f45;
      letter-spacing: 1px;
      text-transform: uppercase;
      user-select: none;
      z-index: 10;
    }
    .lightInstructions { color: #5f9042; }

    canvas { display: block; z-index: 1; }
  </style>
</head>
<body>

<div id="world"></div>
<div id="gameoverInstructions">Game Over</div>
<div id="dist">
  <div class="label">Distance</div>
  <div id="distValue">000</div>
</div>
<div id="instructions">
  Click to jump 
  <span class="lightInstructions"> â€” Grab the carrots / avoid the hedgehogs</span>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r80/three.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/TweenMax.min.js"></script>

<script>
  // --- Basic Three.js Scene Setup ---
  let scene = new THREE.Scene();
  let camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
  let renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.getElementById('world').appendChild(renderer.domElement);

  camera.position.z = 10;
  camera.position.y = 2;

  // --- Ground ---
  let groundGeometry = new THREE.PlaneGeometry(100, 2);
  let groundMaterial = new THREE.MeshBasicMaterial({color: 0x8ED1FC});
  let ground = new THREE.Mesh(groundGeometry, groundMaterial);
  ground.position.y = -2;
  scene.add(ground);

  // --- Rabbit ---
  let rabbitGeometry = new THREE.BoxGeometry(1,1,1);
  let rabbitMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});
  let rabbit = new THREE.Mesh(rabbitGeometry, rabbitMaterial);
  rabbit.position.y = 0;
  rabbit.position.x = -5;
  scene.add(rabbit);

  // --- Obstacles / Carrots ---
  let obstacles = [];
  let carrots = [];
  let distance = 0;
  let gameOver = false;

  function createObstacle() {
    let obsGeom = new THREE.BoxGeometry(1,1,1);
    let obsMat = new THREE.MeshBasicMaterial({color: 0xff0000});
    let obs = new THREE.Mesh(obsGeom, obsMat);
    obs.position.x = 10;
    obs.position.y = -1.5;
    scene.add(obs);
    obstacles.push(obs);
  }

  function createCarrot() {
    let carGeom = new THREE.BoxGeometry(0.5,0.5,0.5);
    let carMat = new THREE.MeshBasicMaterial({color: 0xffa500});
    let car = new THREE.Mesh(carGeom, carMat);
    car.position.x = 10;
    car.position.y = 0;
    scene.add(car);
    carrots.push(car);
  }

  // --- Jumping ---
  let jump = false;
  let velocity = 0;
  let gravity = -0.05;

  window.addEventListener('click', () => {
    if(!gameOver && rabbit.position.y <= 0.01) {
      velocity = 0.7;
      jump = true;
    }
    if(gameOver) location.reload();
  });

  // --- Animation Loop ---
  function animate() {
    requestAnimationFrame(animate);
    if(!gameOver){
      // jump
      if(jump) {
        rabbit.position.y += velocity;
        velocity += gravity;
        if(rabbit.position.y <= 0){
          rabbit.position.y = 0;
          jump = false;
          velocity = 0;
        }
      }

      // move obstacles & carrots
      obstacles.forEach((obs, index) => {
        obs.position.x -= 0.1;
        if(obs.position.x < -10){
          scene.remove(obs);
          obstacles.splice(index,1);
        }

        // check collision
        if(Math.abs(obs.position.x - rabbit.position.x) < 0.75 &&
           Math.abs(obs.position.y - rabbit.position.y) < 0.75){
             gameOver = true;
             document.getElementById('gameoverInstructions').classList.add('show');
        }
      });

      carrots.forEach((car, index) => {
        car.position.x -= 0.1;
        if(car.position.x < -10){
          scene.remove(car);
          carrots.splice(index,1);
        }
      });

      // spawn randomly
      if(Math.random() < 0.01) createObstacle();
      if(Math.random() < 0.02) createCarrot();

      // update distance
      distance += 1;
      document.getElementById('distValue').textContent = distance.toString().padStart(3,'0');
    }

    renderer.render(scene, camera);
  }

  animate();
</script>

</body>
</html>
